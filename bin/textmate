#!/usr/bin/env ruby

require 'thor'

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'textmate'

class TextmateInstaller < Thor

  desc "search [SEARCH]", "Lists all the matching remote bundles"
  def search(search = "")
    display_hash remote.bundles(search)
  end

  desc "list [SEARCH]", "lists all the bundles installed locally"
  def list(search = "")
    display_hash local.bundles(search)
  end

  desc "install NAME [SOURCE]", "install a bundle"
  def install(bundle)
    remotes = remote.bundles(bundle)
    
    case remotes.values.flatten.length
      when 0 then abort("Unknown bundle: #{bundle}")
      when 1 then local.install(bundle, remotes.keys.detect { |k| remotes[k].length == 1 })
      else
        puts "Please select a bundle from the following list:"
        puts
        i = 0
        bundle_index = {}
        remotes.each do |remote, bundles|
          puts remote
          puts '-' * remote.length
          bundles.each do |bundle|
            bundle_index[i += 1] = [bundle, remote]
            puts "#{i}. #{bundle}"
          end
          puts
        end
        index = ask('Which bundle would you like to install?').to_i
        if bundle_index[index]
          local.install(*bundle_index[index]) 
        else
          abort("Unknown option: #{index}")
        end
    end

    reload
  end

  desc "uninstall NAME", "uninstall a bundle"
  def uninstall(bundle)
    puts "Removing bundle..."
    local.uninstall(bundle)
    reload
  end

  desc "reload", "Reloads TextMate Bundles"
  def reload
    puts "Reloading bundles..."
    %x{ osascript -e 'tell app "TextMate" to reload bundles' }
  end

end

def local
  @local ||= Textmate::Local.new
end

def remote
  @remote ||= Textmate::Remote.new
end

def display_hash(hash)
  puts
  hash.keys.sort.each do |key|
    value = hash[key]
    puts key
    puts '-' * key.length
    case value
      when Array then puts value.join("\n") unless value.empty?
      else            puts value
    end
    puts
  end
end

TextmateInstaller.start
