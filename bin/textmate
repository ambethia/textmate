#!/usr/bin/env ruby

require "fileutils"
require "rubygems"
require "thor"

class TextmateInstaller < Thor
  
  # CHANGED: renamed list to remote. Could there be a better name?
  desc "remote [SEARCH]", "Lists all the matching remote bundles"
  def remote(limit = "")
    limit = Regexp.new(".*#{limit}.*", "i")
    puts "\nBundles\n-------\n"
    results = %x[svn list #{svn_for("bundles")}]
    puts results.map {|x| x.split(".")[0]}.select {|x| x =~ limit}.join("\n")
    puts "\nReview\n------\n"
    results = %x[svn list #{svn_for("review")}]
    puts results.map {|x| x.split(".")[0]}.select {|x| x =~ limit}.join("\n")
  end
  
  desc "list", "lists all the bundles installed locally"
  def list()
    bundles_paths.each do |location,bundles_path|
      puts location.to_s << " Bundles\n" << location.to_s.gsub(/./,'-') << '--------'
      puts Dir["#{e_sh bundles_path}/*.tmbundle"].map {|x| x.split("/").last.split(".").first}.join("\n")
    end
  end
  
  desc "install NAME", "install a bundle"
  def install(name)
    FileUtils.mkdir_p install_bundles_path
    type = where(name)
    puts "Checking out #{name}..."
    res = %x[svn co #{svn_for(type)}/#{e_sh name}.tmbundle #{e_sh install_bundles_path}/#{e_sh name}.tmbundle]
    puts "Reloading Bundles..."
    reload_textmate!
    puts "Done."
  end

  desc "uninstall NAME", "uninstall a bundle"
  def uninstall(name)
    puts "Removing bundle..."
    # FIXME: Move deleted bundles to the trash instead of rm_rf-ing them?
    # When moving to the trash, maybe move the bundle into a trash/disabled_bundles subfolder 
    #   named as the bundles_path key. Just in case there are multiple versions of 
    #     the same bundle in multiple bundle paths
    bundles_paths.each do |location,bundles_path|
      FileUtils.rm_rf("#{bundles_path}/#{name}.tmbundle")    
    end
    puts "Reloading bundles..."
    reload_textmate!
    puts "Done."
  end
  
  private
  def reload_textmate!
    %x[osascript -e 'tell app "TextMate" to reload bundles']
  end

  def where(bundle)
    bundles = %x[svn list #{svn_for("bundles")}].map {|x| x.split(".")[0]}
    review  = %x[svn list #{svn_for("review")}].map {|x| x.split(".")[0]}
    return "bundles" if bundles.include?(bundle)
    return "review"  if review.include?(bundle)
  end
    
  def svn_for(type)
    if type =~ /bundles/i
      "http://macromates.com/svn/Bundles/trunk/Bundles"
    elsif type =~ /review/i
      "http://macromates.com/svn/Bundles/trunk/Review/Bundles"
    end
  end
  
  def bundles_paths
    { :Application       => '/Applications/TextMate.app/Contents/SharedSupport/Bundles',
      :User              => "#{ENV["HOME"]}/Library/Application Support/TextMate/Bundles",
      :System            => '/Library/Application Support/TextMate/Bundles',
      :'User Pristine'   => "#{ENV["HOME"]}/Library/Application Support/TextMate/Pristine Copy",
      :'System Pristine' => '/Library/Application Support/TextMate/Pristine Copy',
    }
  end
  
  def install_bundles_path
    #TODO: Add some way for the user to configure where they'd prefer to install bundles
    bundles_paths[:'User Pristine']
  end
  
  # Copied from http://macromates.com/svn/Bundles/trunk/Support/lib/escape.rb
  # escape text to make it useable in a shell script as one “word” (string)
  def e_sh(str)
  	str.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
  end
  
end

TextmateInstaller.start
